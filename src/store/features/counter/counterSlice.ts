import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../index';
import axios from 'axios';

// initial data interface
export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  catList: {
    _id: string;
    breed: string;
    age: number;
    name: string;
  }[];
}
const initialState: CounterState = {
  value: 0,
  status: 'idle',
  catList: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCatList = createAsyncThunk('counter/getCatList', async () => {
  const response = await axios.get('/api/cats');
  return response.data;
});

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetCatList: (state) => {
      state.catList = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // 异步的状态处理
    builder
      .addCase(getCatList.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getCatList.fulfilled, (state, action) => {
        state.status = 'idle';
        state.catList = action.payload;
      })
      .addCase(getCatList.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// 抛出同步方法
export const { resetCatList } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// 抛出值
export const selectCatList = (state: RootState) => state.counter.catList;

export default counterSlice.reducer;
